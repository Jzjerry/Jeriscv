package Jeriscv

import chisel3._
import chisel3.experimental._
import chisel3.util._

object InstType extends ChiselEnum{
  val R_Type, I_Type, S_Type, B_Type, U_Type, J_Type = Value
}

object RV32I_ALU {
    // R-Type
    def ADD = BitPat("b0000000?????_?????_000_?????_0110011")

    def SUB = BitPat("b0100000?????_?????_000_?????_0110011")

    def SLL = BitPat("b0000000?????_?????_001_?????_0110011")

    def SLT = BitPat("b0000000?????_?????_010_?????_0110011")

    def SLTU = BitPat("b0000000?????_?????_011_?????_0110011")

    def XOR = BitPat("b0000000?????_?????_100_?????_0110011")

    def SRL = BitPat("b0000000?????_?????_101_?????_0110011")

    def SRA = BitPat("b01000000?????_?????_101_?????_0110011")

    def OR = BitPat("b0000000?????_?????_110_?????_0110011")

    def AND = BitPat("b0000000?????_?????_111_?????_0110011")

    // I-Type
    def ADDI = BitPat("b????????????_?????_000_?????_0010011")

    def SLLI = BitPat("b0000000?????_?????_001_?????_0010011")

    def SLTI = BitPat("b????????????_?????_010_?????_0010011")

    def SLTIU = BitPat("b????????????_?????_011_?????_0010011")

    def XORI = BitPat("b????????????_?????_100_?????_0010011")

    def SRLI = BitPat("b0000000?????_?????_101_?????_0010011")

    def ORI = BitPat("b????????????_?????_110_?????_0010011")

    def ANDI = BitPat("b????????????_?????_111_?????_0010011")

    def SRAI = BitPat("b0100000?????_?????_101_?????_0010011")

    def JALR = BitPat("b????????????_?????_000_?????_1101111")

    // U-Type
    def AUIPC = BitPat("b????????????????????_?????_0010111")

    def LUI = BitPat("b????????????????????_?????_0110111")

    // J-Type
    def JAL = BitPat("b????????????????????_?????_1101111")

    val table = Array(
      ADD -> List(InstType.R_Type, ALUFunct3.add),
      SUB -> List(InstType.R_Type, ALUFunct3.sub),
      SLL -> List(InstType.R_Type, ALUFunct3.sll),
      SLT -> List(InstType.R_Type, ALUFunct3.slt),
      SLTU -> List(InstType.R_Type, ALUFunct3.sltu),
      XOR -> List(InstType.R_Type, ALUFunct3.xor),
      SRL -> List(InstType.R_Type, ALUFunct3.srl),
      SRA -> List(InstType.R_Type, ALUFunct3.sra),
      OR -> List(InstType.R_Type, ALUFunct3.or),
      AND -> List(InstType.R_Type, ALUFunct3.and),

      ADDI -> List(InstType.I_Type, ALUFunct3.add),
      SLLI -> List(InstType.I_Type, ALUFunct3.sll),
      SLTI -> List(InstType.I_Type, ALUFunct3.slt),
      SLTIU -> List(InstType.I_Type, ALUFunct3.sltu),
      XORI -> List(InstType.I_Type, ALUFunct3.xor),
      SRLI -> List(InstType.I_Type, ALUFunct3.srl),
      ORI -> List(InstType.I_Type, ALUFunct3.or),
      ANDI -> List(InstType.I_Type, ALUFunct3.and),
      SRAI -> List(InstType.I_Type, ALUFunct3.sra),
      JALR -> List(InstType.I_Type, ALUFunct3.add),

      AUIPC -> List(InstType.U_Type, ALUFunct3.add),
      LUI -> List(InstType.U_Type, ALUFunct3.add),

      JAL -> List(InstType.J_Type, ALUFunct3.add)
    )
}
